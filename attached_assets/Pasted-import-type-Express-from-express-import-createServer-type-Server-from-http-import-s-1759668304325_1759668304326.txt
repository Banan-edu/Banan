import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertRegistrationSchema, insertContactMessageSchema } from "@shared/schema";
import { z } from "zod";
import nodemailer from "nodemailer";

// Email configuration for Gmail
const transporter = nodemailer.createTransport({
  service: 'gmail', // Use predefined Gmail service
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS, // This should be an App Password for Gmail
  },
  tls: {
    rejectUnauthorized: false
  }
});

// Verify connection configuration on startup
transporter.verify((error, success) => {
  if (error) {
    console.error('❌ SMTP configuration error:', error.message);
    console.log('💡 Tip: For Gmail, you need an App Password. Go to Google Account Settings > Security > 2-Step Verification > App passwords');
  } else {
    console.log('✅ Gmail SMTP server is ready to send emails');
  }
});

export async function registerRoutes(app: Express): Promise<Server> {
  // Registration endpoint
  app.post("/api/register", async (req, res) => {
    try {
      const validatedData = insertRegistrationSchema.parse(req.body);
      
      // Store registration in database first
      const registration = await storage.createRegistration(validatedData);
      
      // Try to send email notification (non-blocking)
      let emailSent = false;
      try {
        const emailContent = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; direction: rtl;">
            <h2 style="color: #2563EB; text-align: center;">تسجيل جديد في برنامج بنان</h2>
            <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="color: #1e40af; margin-top: 0;">معلومات المتقدم:</h3>
              <p><strong>الاسم:</strong> ${validatedData.fullName}</p>
              <p><strong>الجنس:</strong> ${validatedData.gender === 'male' ? 'ذكر' : 'أنثى'}</p>
              <p><strong>تاريخ الميلاد:</strong> ${validatedData.dateOfBirth}</p>
              <p><strong>الهاتف:</strong> ${validatedData.phone}</p>
              <p><strong>البريد الإلكتروني:</strong> ${validatedData.email}</p>
              <p><strong>سرعة الطباعة الحالية:</strong> ${validatedData.currentTypingSpeed || 'غير محدد'} كلمة/دقيقة</p>
              <p><strong>السرعة المرغوبة:</strong> ${validatedData.desiredTypingSpeed || 'غير محدد'} كلمة/دقيقة</p>
              ${validatedData.additionalInfo ? `<p><strong>معلومات إضافية:</strong> ${validatedData.additionalInfo}</p>` : ''}
            </div>
            <p style="text-align: center; color: #64748b;">تم الإرسال من منصة بنان التعليمية</p>
          </div>
        `;
        
        await transporter.sendMail({
          from: process.env.SMTP_USER,
          to: "hzalraee@inspiration.edu.sa",
          cc: "info.banan@inspiration.edu.sa",
          subject: "تسجيل جديد في برنامج بنان - الدفعة الأولى 2025",
          html: emailContent,
        });
        emailSent = true;
      } catch (emailError) {
        console.error("Email sending failed:", emailError);
        // Continue without failing the registration
      }
      
      res.json({ 
        success: true, 
        message: emailSent ? "تم إرسال التسجيل بنجاح" : "تم حفظ التسجيل بنجاح (سيتم إرسال تأكيد بالبريد الإلكتروني لاحقاً)",
        registration: registration,
        emailSent: emailSent
      });
    } catch (error) {
      console.error("Registration error:", error);
      
      if (error instanceof z.ZodError) {
        return res.status(400).json({ 
          success: false, 
          message: "بيانات غير صحيحة", 
          errors: error.errors 
        });
      }
      
      res.status(500).json({ 
        success: false, 
        message: "حدث خطأ في الخادم" 
      });
    }
  });

  

  // Contact form endpoint
  app.post("/api/contact", async (req, res) => {
    try {
      const validatedData = insertContactMessageSchema.parse(req.body);
      
      // Store contact message in database first
      const contactMessage = await storage.createContactMessage(validatedData);
      
      // Try to send email (non-blocking)
      let emailSent = false;
      try {
        const emailContent = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2563EB;">رسالة جديدة من موقع بنان</h2>
            <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <p><strong>الاسم:</strong> ${validatedData.name}</p>
              <p><strong>البريد الإلكتروني:</strong> ${validatedData.email}</p>
              <p><strong>الموضوع:</strong> ${validatedData.subject}</p>
              <p><strong>الرسالة:</strong></p>
              <div style="background: white; padding: 15px; border-radius: 4px; margin-top: 10px;">
                ${validatedData.message}
              </div>
            </div>
          </div>
        `;
        
        await transporter.sendMail({
          from: process.env.SMTP_USER,
          to: "hzalraee@inspiration.edu.sa",
          subject: `رسالة من موقع بنان: ${validatedData.subject}`,
          html: emailContent,
          replyTo: validatedData.email,
        });
        emailSent = true;
      } catch (emailError) {
        console.error("Contact email sending failed:", emailError);
        // important 
        // Continue without failing the contact form
      }
      
      res.json({ 
        success: true, 
        message: emailSent ? "تم إرسال الرسالة بنجاح" : "تم استلام رسالتك بنجاح (سيتم الرد عليك قريباً)",
        contactMessage: contactMessage,
        emailSent: emailSent
      });
    } catch (error) {
      console.error("Contact form error:", error);
      
      if (error instanceof z.ZodError) {
        return res.status(400).json({ 
          success: false, 
          message: "بيانات غير صحيحة", 
          errors: error.errors 
        });
      }
      
      res.status(500).json({ 
        success: false, 
        message: "حدث خطأ في إرسال الرسالة" 
      });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
